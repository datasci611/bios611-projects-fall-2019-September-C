model1 = lm(hours_in_space ~ age, data = astronaut_df)
model5 = lm(hours_in_space ~ (age^5) + I(age^4) + I(age^3) +
I(age^2) + age, data = astronaut_df)
model15 = lm(hours_in_space ~ I(age^15) + I(age^14) + I(age^13) +
I(age^12) + I(age^11) + I(age^10) + I(age^9) + I(age^8) +
I(age^7) + I(age^6) + I(age^5) + I(age^4) + I(age^3) +
I(age^2) + age, data = astronaut_df)
overfit_model = astronaut_df %>%
data_grid(age) %>%
gather_predictions(model1, model5, model15) %>%
mutate(hours_in_space = pred)
ggplot(astronaut_df, aes(age, hours_in_space)) +
geom_point(size=2, alpha=0.5) +
geom_line(data=overfit_model, size=2, alpha=0.5, aes(color=factor(model)))
sse <- function(residuals) {
sse_val = sum(residuals^2)
return(sse_val)
}
sse_test <- function(test_set, model){
residuals_tmp = test_set %>%
add_residuals(model, var='r15') %>%
.$r15 %>%
sse()
}
sse_test
sse_val
train_i = createDataPartition(astronaut_df$astronaut_id, p = .5, list=FALSE)
train_df = astronaut_df[train_i,]
test_df = astronaut_df[-train_i,]
model1 = lm(hours_in_space ~ age, data = train_df)
model5 = lm(hours_in_space ~ (age^5) + I(age^4) + I(age^3) +
I(age^2) + age, data = train_df)
model15 = lm(hours_in_space ~ I(age^15) + I(age^14) + I(age^13) +
I(age^12) + I(age^11) + I(age^10) + I(age^9) +
I(age^8) + I(age^7) + I(age^6) + I(age^5) + I(age^4) +
I(age^3) + I(age^2) + age, data = train_df)
overfit_model2 = test_df %>%
data_grid(age) %>%
gather_predictions(model1, model5, model15) %>%
mutate(hours_in_space = pred)
ggplot(test_df, aes(age, hours_in_space)) +
geom_point(size=2, alpha=0.5) +
geom_line(data=overfit_model2, size=2, alpha=0.5, aes(color=factor(model)))
model_list = list(model1, model5, model15)
sse_values = rep(0,3)
for(i in 1:length(model_list)){
sse_values[i] = sse_test(test_df, model_list[[i]])
}
sse_values
train_i = createDataPartition(astronaut_df$astronaut_id, p = .5, list=FALSE, times=10)
sse_tibble = tibble()
for(i in 1:ncol(train_i)){
train_df = astronaut_df[train_i[,i],]
test_df = astronaut_df[-train_i[,i],]
model1 = lm(hours_in_space ~ age, data = train_df)
model5 = lm(hours_in_space ~ (age^5) + I(age^4) + I(age^3) + I(age^2) + age, data = train_df)
model15 = lm(hours_in_space ~ I(age^15) + I(age^14) + I(age^13) + I(age^12) + I(age^11) + I(age^10) + I(age^9) + I(age^8) + I(age^7) + I(age^6) + I(age^5) + I(age^4) + I(age^3) + I(age^2) + age, data = train_df)
model_list = list(model1, model5, model15)
sse_values = rep(0,3)
for(i in 1:length(model_list)){
sse_values[i] = sse_test(test_df, model_list[[i]])
}
sse_tibble = rbind(sse_tibble, sse_values)
}
names(sse_tibble) = c('model1', 'model5', 'model15')
print(sse_tibble)
sse_tibble %>%
summarise(m1 = mean(model1), m5 = mean(model5), m15 = mean(model15))
residence = read.csv("https://raw.githubusercontent.com/fivethirtyeight/data/master/police-locals/police-locals.csv")
residence = read.csv("https://raw.githubusercontent.com/fivethirtyeight/data/master/police-locals/police-locals.csv")
View(residence)
View(residence)
res_0 = residence %>% select(-city)
d0 = dist(res_0)
d0
sd(c(31, 28, 26, 24, 29, 33, 25, 26, 28))
mean(c(31, 28, 26, 24, 29, 33, 25, 26, 28))
qt(1-0.05/2, 9-1)
qt(1-0.1/2, 9-1)
(2.306)*(0.9687)
27.78 + c(-1,1)*2.23
setwd("/Users/September/Desktop/UNC/FALL 2019 /SPHG 711/Data")
fluoride = read.csv(fluoride.csv)
setwd("/Users/September/Desktop/UNC/FALL 2019 /SPHG 711/Data")
fluoride = read.csv(fluoride.csv)
setwd("/Users/September/Desktop/UNC/FALL 2019 /SPHG 711/Data")
fluoride = read.csv("fluoride.csv")
View(fluoride)
stem(fluoride$delta)
12/16
xbar = mean(fluoride$delta)
s = sd(fluoride$delta)
xbar
s
xbar = mean(c(33.4, 36.2, 34.8, 35.2, 35.5))
s = sd(c(33.4, 36.2, 34.8, 35.2, 35.5))
xbar
s
1.04/sqrt(5)
35.02 +c(-1,1)*4.602*0.465
n = 25
t = 2.1
pvalue = 2*pt(-abs(t),df=n-1)
pvalue
t = 2.05
n = 25
pvalue = 2*pt(-abs(t),df=n-1)
pvalue
bph = read.csv("bph-samp.csv")
setwd("/Users/September/Desktop/UNC/FALL 2019 /SPHG 711/Data")
bph = read.csv("bph-samp.csv")
View(bph)
setwd("/Users/September/Desktop/UNC/FALL 2019 /SPHG 711/Data")
bph = read.csv("bph-samp.csv")
bph$delta = bph$qol_3mo - bph$qol_base
bph$delta
stem(bph$delta)
stem(bph$delta)
stem(bph$delta)
bph$delta
stem(bph$delta)
fluoride$delta
bph$delta
stem(bph$delta)
setwd("/Users/September/Desktop/UNC/FALL 2019 /SPHG 711/Data")
bph = read.csv("bph-samp.csv")
bph$delt_qol
stem(bph$delt_qol)
stem(c(3.0, 2.0, 1.0, 3.0, 4.0, 2.0, -1.0, 0, 2.0))
stem(c(3.0, 2.0, 1.0, 3.0, 4.0, 2.0, -1.0, 0, 2.0))
stem(c(3.0, 2.0, 1.0, 3.0, 4.0, 2.0, -1.0, 0, 2.0))
stem(c(3.0, 2.0, 1.0, 3.0, 4.0, 2.0, -1.0, 0, 2.0))
stem(c(3.0, 2.0, 1.0, 3.0, 4.0, 2.0, -1.0, 0, 2.0))
stem(c(3.0, 2.0, 1.0, 3.0, 4.0, 2.0, -1.0, 0, 2.0))
stem(c(3.0, 2.0, 1.0, 3.0, 4.0, 2.0, 0, 2.0))
bph$delt_qol
plot(bph$delt_qol)
hist(bph$delt_qol)
setwd("/Users/September/Desktop/UNC/FALL 2019 /SPHG 711/Data")
bph = read.csv("bph-samp.csv")
hist(bph$delt_qol)
xfit<-seq(min(x),max(x),length=40)
setwd("/Users/September/Desktop/UNC/FALL 2019 /SPHG 711/Data")
bph = read.csv("bph-samp.csv")
x = bph$delt_qol
hist(bph$delt_qol)
xfit<-seq(min(x),max(x),length=40)
yfit<-dnorm(xfit,mean=mean(x),sd=sd(x))
yfit <- yfit*diff(h$mids[1:2])*length(x)
setwd("/Users/September/Desktop/UNC/FALL 2019 /SPHG 711/Data")
bph = read.csv("bph-samp.csv")
x = bph$delt_qol
h = hist(bph$delt_qol)
xfit<-seq(min(x),max(x),length=40)
yfit<-dnorm(xfit,mean=mean(x),sd=sd(x))
yfit <- yfit*diff(h$mids[1:2])*length(x)
lines(xfit, yfit, col="blue", lwd=2)
xbar = mean(bph$delt_qol)
s = sd(bph$delt_qol)
xbar = mean(bph$delt_qol)
s = sd(bph$delt_qol)
xbar
s
1.49/sqrt(10)
1.7/0.47
n = 10
t = 3.617
pvalue = 2*pt(-abs(t),df=n-1)
pvalue
median(bph$delt_qol)
44.25/3
44.25+5.13
49.38 + 8.1 + 11.86
69.34/3
16.46 + (8.1 + 11.86)/3
6.66+16.46
7 + 16
24 - 9.5
23.2 - 9.5
14.5-13.7
0.8*7
(0.00025*(1/3 * 50^3 - 40*50^2 + 1600*50) + 0.27*50) - (0.00025*(1/3 * 40^3 - 40*40^2 + 1600*40) + 0.27*40)
(0.00025*((1/3)*50^3 - 40*50^2 + 1600*50) + 0.27*50) - (0.00025*((1/3)*40^3 - 40*40^2 + 1600*40) + 0.27*40)
(0.00025*((1/3)*50^3 - 40*50^2 + 1600*50) + 0.027*50) - (0.00025*((1/3)*40^3 - 40*40^2 + 1600*40) + 0.027*40)
exp(-0.353)
library(tidyverse)
library(knitr)
library(ggplot2)
library(hexbin)
ggplot(dat.food.before.2000,aes(x=dat.food.before.2000$Date, y=dat.food.before.2000$`Food Pounds`)) +
geom_point()+
geom_smooth() +
ggtitle("Amount of Food Distributed over Time Before 2000 (lbs)") +
xlab("Date") + ylab("Amount of Food Distributed (lbs)")
library(tidyverse)
library(knitr)
library(ggplot2)
library(hexbin)
dat = read_tsv("https://raw.githubusercontent.com/biodatascience/datasci611/gh-pages/data/project1_2019/UMD_Services_Provided_20190719.tsv")
View(dat)
dat = read_tsv("https://raw.githubusercontent.com/biodatascience/datasci611/gh-pages/data/project1_2019/UMD_Services_Provided_20190719.tsv")
dat = dat[ , -c(2,3,4,5,8,9,10,11,12,13,14,15,16,17,18)]
dat$Date =  as.Date(dat$Date,'%m/%d/%Y')
dat.food = dat[ ,-2]
dat.food.before.2000 = dat.food %>%
filter(substr(dat.food$Date, 1, 4) < 2000 & substr(dat.food$Date, 1, 4) > 1982 & dat.food$`Food Pounds` > 0)
length(which(!is.na(dat.food.before.2000$`Food Pounds`)))
# which(!is.na(dat.food.before.2000$`Food Pounds`))
dat.food.2000to2009 = dat.food %>%
filter(substr(dat.food$Date, 1, 4) < 2010 & substr(dat.food$Date, 1, 4) >= 2000 &   dat.food$`Food Pounds` > 0)
#View(dat.food.2000to2009)
length(which(!is.na(dat.food.2000to2009$`Food Pounds`)))
#which(!is.na(dat.food.2000to2009$`Food Pounds`))
dat.food.after2009 = dat.food %>%
filter(substr(dat.food$Date, 1, 4) >= 2010 &   dat.food$`Food Pounds` > 0)
#View(dat.food.after2009)
length(which(!is.na(dat.food.after2009$`Food Pounds`)))
#which(!is.na(dat.food.after2009$`Food Pounds`))
boxplot(dat.food.before.2000$`Food Pounds`)
boxplot(dat.food.2000to2009$`Food Pounds`)
boxplot(dat.food.before.2000$`Food Pounds`)$out
boxplot(dat.food.2000to2009$`Food Pounds`)$out
# identify outliers using boxplots
boxplot(dat.food.before.2000$`Food Pounds`, plot=FALSE)$out
# For before 2000, thre is one outlier above 50.
boxplot(dat.food.2000to2009$`Food Pounds`, plot=FALSE)$out
boxplot(dat.food.after2009$`Food Pounds`, plot=FALSE)$out
# identify outliers using boxplots
boxplot(dat.food.before.2000$`Food Pounds`, plot=FALSE)$out
# For before 2000, thre is one outlier above 50.
boxplot(dat.food.2000to2009$`Food Pounds`, plot=FALSE)$out
boxplot(dat.food.after2009$`Food Pounds`, plot=FALSE)$out
# identify outliers using boxplot function and assign the outlier values into a vector
outliers1 = boxplot(dat.food.before.2000$`Food Pounds`, plot=FALSE)$out
outliers2 = boxplot(dat.food.2000to2009$`Food Pounds`, plot=FALSE)$out
outliers3 = boxplot(dat.food.after2009$`Food Pounds`, plot=FALSE)$out
# Check the results
print(outliers1)
print(outliers2)
print(outliers3)
dat.food.before.2000[which(dat.food.before.2000$`Food Pounds` %in% outliers1),]
dat.food.2000to2009[which(dat.food.2000to2009$`Food Pounds` %in% outliers2),]
dat.food.after2009[which(dat.food.after2009$`Food Pounds` %in% outliers3),]
# identify outliers using boxplot function and assign the outlier values into a vector
outliers1 = boxplot(dat.food.before.2000$`Food Pounds`, plot=FALSE)$out
outliers2 = boxplot(dat.food.2000to2009$`Food Pounds`, plot=FALSE)$out
outliers3 = boxplot(dat.food.after2009$`Food Pounds`, plot=FALSE)$out
# Check the results
print(outliers1)
print(outliers2)
print(outliers3)
# Removing the outliers
# First find in which rows the outliers are
dat.food.before.2000[which(dat.food.before.2000$`Food Pounds` %in% outliers1),]
dat.food.2000to2009[which(dat.food.2000to2009$`Food Pounds` %in% outliers2),]
dat.food.after2009[which(dat.food.after2009$`Food Pounds` %in% outliers3),]
# Now you can remove the rows containing the outliers, one possible option is:
dat.food.before.2000 = dat.food.before.2000[-which(dat.food.before.2000$`Food Pounds` %in% outliers1),]
dat.food.2000to2009 = dat.food.2000to2009[-which(dat.food.2000to2009$`Food Pounds` %in% outliers2),]
dat.food.after2009 = dat.food.after2009[-which(dat.food.after2009$`Food Pounds` %in% outliers3),]
boxplot(dat.food.before.2000$`Food Pounds`)
boxplot(dat.food.2000to2009$`Food Pounds`)
boxplot(dat.food.after2009$`Food Pounds`)
summary(dat.food.before.2000$`Food Pounds`)
summary(dat.food.2000to2009$`Food Pounds`)
summary(dat.food.after2009$`Food Pounds`)
# total lbs of food provided inn each period
sum(dat.food.before.2000$`Food Pounds`) # 1186 lbs of food provided before 2000
sum(dat.food.2000to2009$`Food Pounds`) # 160116 lbs of food provided between 2000 and 2009
sum(dat.food.after2009$`Food Pounds`) # 1606101 lbs of food provided on and after 2010
# Observe a large increase in the amount of food provided over the years.
ggplot(dat.food.before.2000,aes(x=dat.food.before.2000$Date, y=dat.food.before.2000$`Food Pounds`)) +
geom_point()+
geom_smooth() +
ggtitle("Amount of Food Distributed over Time Before 2000 (lbs)") +
xlab("Date") + ylab("Amount of Food Distributed (lbs)")
ggplot(dat.food.2000to2009,aes(x=dat.food.2000to2009$Date, y=dat.food.2000to2009$`Food Pounds`)) +
geom_point() +
geom_smooth() +
ggtitle("Amount of Food Distributed over Time between 2000 and 2009 (lbs)") +
xlab("Date") + ylab("Amount of Food Distributed (lbs)")
ggplot(dat.food.after2009,aes(x=dat.food.after2009$Date, y=dat.food.after2009$`Food Pounds`)) +
geom_point() +
geom_smooth() +
ggtitle("Amount of Food Distributed over Time after 2009 (lbs)") +
xlab("Date") + ylab("Amount of Food Distributed (lbs)")
boxplot(dat.food.before.2000$`Food Pounds`, main = "Before 2000")
xbar = 0.67
n = 6
sqrt(((-1-xbar)^2 + (-1-xbar)^2 + (0-xbar)^2) + (1-xbar)^2 + (2-xbar)^2 + (3-xbar)^2/6)
sqrt(((-1-xbar)^2 + (-1-xbar)^2 + (0-xbar)^2) + (1-xbar)^2 + (2-xbar)^2 + (3-xbar)^2/5)
sqrt(((-1-xbar)^2 + (-1-xbar)^2 + (0-xbar)^2) + (1-xbar)^2 + (2-xbar)^2 + (3-xbar)^2/6)
sqrt(((-1-xbar)^2 + (-1-xbar)^2 + (0-xbar)^2) + (1-xbar)^2 + (2-xbar)^2 + (3-xbar)^2)/6)
sqrt(((-1-xbar)^2 + (-1-xbar)^2 + (0-xbar)^2 + (1-xbar)^2 + (2-xbar)^2 + (3-xbar)^2)/6)
sqrt(((-1-xbar)^2 + (-1-xbar)^2 + (0-xbar)^2 + (1-xbar)^2 + (2-xbar)^2 + (3-xbar)^2)/6)
0.9^5
0.9^5 + 0.9^4*0.1
0.9^5 + (0.9^4)*(0.1)
choose(5,0)
0.9^5 + 5*(0.9^4)*0.1
200000 - 213000
(200000 - 213000)/50000
1-0.3974
50000*1.645
50000*1.645 + 213000
1/3
150*0.27
-5/(3*sqrt(2))
1-0.119
(114/1081)/(91/2919)
# Chunk 1: setup
knitr::opts_chunk$set(echo = FALSE)
library(shiny)
# Chunk 2
ui = fluidPage()
server = function(input, output){}
shinyApp(ui = ui, server = server)
# Chunk 1: setup
knitr::opts_chunk$set(echo = FALSE)
library(shiny)
# Chunk 2
ui = fluidPage("Hello!")
server = function(input, output){}
shinyApp(ui = ui, server = server)
# Chunk 1: setup
knitr::opts_chunk$set(echo = FALSE)
library(shiny)
library(tidyverse)
library(knitr)
library(ggplot2)
library(hexbin)
dat = read_tsv("https://raw.githubusercontent.com/biodatascience/datasci611/gh-pages/data/project1_2019/UMD_Services_Provided_20190719.tsv")
dat = dat[ , -c(2,3,4,5,8,9,10,11,12,13,14,15,16,17,18)]
dat$Date =  as.Date(dat$Date,'%m/%d/%Y')
dat.food = dat[ ,-2]
# Chunk 2
ui = fluidPage(
sliderInput(inputId = "year",
label = "Choose a year",
value = 2000, min = 1983, max = 2019),
plotOutput("density")
)
server = function(input, output){
output$density = renderPlot({
title = "Amount of Food (lbs) Distributed over Time"
ggplot(dat.food, aes(x=dat.food, y=dat.food$`Food Pounds`)) +
geom_point() +
geom_smooth() +
xlab("Date") + ylab("Amount of Food Distributed (lbs) over the years")
})
}
shinyApp(ui = ui, server = server)
# Chunk 1: setup
knitr::opts_chunk$set(echo = FALSE)
library(shiny)
library(tidyverse)
library(knitr)
library(ggplot2)
library(hexbin)
dat = read_tsv("https://raw.githubusercontent.com/biodatascience/datasci611/gh-pages/data/project1_2019/UMD_Services_Provided_20190719.tsv")
dat = dat[ , -c(2,3,4,5,8,9,10,11,12,13,14,15,16,17,18)]
dat$Date =  as.Date(dat$Date,'%m/%d/%Y')
dat.food = dat[ ,-2]
# Chunk 2
ui = fluidPage(
sliderInput(inputId = "year",
label = "Choose a year",
value = 2000, min = 1983, max = 2019),
plotOutput("density")
)
server = function(input, output){
output$density = renderPlot({
title = "Amount of Food (lbs) Distributed over Time"
ggplot(dat.food, aes(x=dat.food, y=dat.food$`Food Pounds`)) +
geom_point() +
geom_smooth() +
xlab("Date") + ylab("Amount of Food Distributed (lbs) over the years")
})
}
shinyApp(ui = ui, server = server)
# Chunk 1: setup
knitr::opts_chunk$set(echo = FALSE)
library(shiny)
library(tidyverse)
library(knitr)
library(ggplot2)
library(hexbin)
dat = read_tsv("https://raw.githubusercontent.com/biodatascience/datasci611/gh-pages/data/project1_2019/UMD_Services_Provided_20190719.tsv")
dat = dat[ , -c(2,3,4,5,8,9,10,11,12,13,14,15,16,17,18)]
dat$Date =  as.Date(dat$Date,'%m/%d/%Y')
dat.food = dat[ ,-2]
# Chunk 2
ui = fluidPage(
sliderInput(inputId = "year",
label = "Choose a year",
value = 2000, min = 1983, max = 2019),
plotOutput("density")
)
server = function(input, output){
output$density = renderPlot({
title = "Amount of Food (lbs) Distributed over Time"
ggplot(dat.food, aes(x=dat.food, y=dat.food$`Food Pounds`)) +
geom_point() +
geom_smooth() +
xlab("Date") + ylab("Amount of Food Distributed (lbs) over the years")
})
}
shinyApp(ui = ui, server = server)
sqrt((32.37^2)/5 + (41.73^2)/6)
(219.4 - 163.83) + c(-1,1)*9*22.35611
(219.4 - 163.83)/22.35611
knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/September/Desktop/UNC/FALL 2019 /SPHG 711/Data")
read.csv("Lyle1987.csv")
setwd("/Users/September/Desktop/UNC/FALL 2019 /SPHG 711/Data")
dat = read.csv("Lyle1987.csv")
View(dat)
g1 = dat[which(dat$group == 1)]
g1 = dat[which(dat$group == 1), ]
g1
g2 = dat[which(dat$group == 2), ]
g2
boxplot(g1$delta, g2$delta)
setwd("/Users/September/Desktop/UNC/FALL 2019 /SPHG 711/Data")
dat = read.csv("Lyle1987.csv")
g1 = dat[which(dat$group == 1), ]
g2 = dat[which(dat$group == 2), ]
boxplot(g1$delta, g2$delta, names = c("Group 1", "Group 2"), col = c("light blue", "grey"), ylab = "changes in blood pressure", xlab = "Groups", main = "Boxplots of the changes in blood pressure in treatment and control groups")
View(dat)
setwd("/Users/September/Desktop/UNC/FALL 2019 /SPHG 711/Data")
dat = read.csv("Lyle1987.csv")
g1 = dat[which(dat$group == 1), ]
g2 = dat[which(dat$group == 2), ]
boxplot(g1$delta, g2$delta, names = c("Calcium (treatment)", "Placebo (Control)"), col = c("light blue", "grey"), ylab = "changes in blood pressure", xlab = "Groups", main = "Boxplots of the changes in blood pressure in treatment and control groups")
summary(g1)
summary(g1)
summary(g2)
t.test(g1$delta, g2$delta)
t.test(g1$delta, g2$delta)
(219.4 - 163.83) +c(-1,1)*2.26*22.35611
library(rsconnect)
rsconnect::setAccountInfo(name='september', token='79BE2A07AF31C5ABE4EB0A8ED0F7F430', secret='qE/rtLIrOsDYJZUVtzLYTJPJF/xMmUvJvrUOsVMB')
rsconnect::deployApp('path/to/your/app')
rsconnect::deployApp('/Users/September/Documents/GitHub/bios611-projects-fall-2019-September-C/project_2/scripts')
rsconnect::deployApp('/Users/September/Documents/GitHub/bios611-projects-fall-2019-September-C/project_2/scripts/project2_app.R')
rsconnect::deployApp('/Users/September/Documents/GitHub/bios611-projects-fall-2019-September-C/project_2/scripts/')
library(rsconnect)
rsconnect::deployApp('/Users/September/Documents/GitHub/bios611-projects-fall-2019-September-C/project_2/scripts')
library(rsconnect)
rsconnect::deployApp('/Users/September/Documents/GitHub/bios611-projects-fall-2019-September-C/project_2')
library(rsconnect)
rsconnect::deployApp('/Users/September/Documents/GitHub/bios611-projects-fall-2019-September-C')
devtools::install_github('rstudio/shinyapps')
options(shinyapps.locale.cache=FALSE)
shinyapps:::systemLocale()
devtools::install_github('rstudio/shinyapps')
rsconnect::deployApp('/Users/September/Documents/GitHub/bios611-projects-fall-2019-September-C/project_2')
devtools::install_github('rstudio/shinyapps')
options(shinyapps.locale.cache=FALSE)
shinyapps:::systemLocale()
install.packages("shinyapps")
rsconnect::deployApp('/Users/September/Documents/GitHub/bios611-projects-fall-2019-September-C/project_2')
0.309 - 0.286
(30+30)/(105+97)
1 - 0.297
sqrt(0.297*(0.703)*(1/105 + 1/97))
(0.309 - 0.286)/0.064
0.309/0.286
21/49
2/26
knitr::opts_chunk$set(echo = TRUE)
res <- prop.test(x = c(21, 2), n = c(49, 26))
res <- prop.test(x = c(21, 2), n = c(49, 26))
prop.test(x = c(21, 2), n = c(49, 26))
prop.test(x = c(21, 2), n = c(49, 26), correct=FALSE)
z.prop = function(x1,x2,n1,n2){
numerator = (x1/n1) - (x2/n2)
p.common = (x1+x2) / (n1+n2)
denominator = sqrt(p.common * (1-p.common) * (1/n1 + 1/n2))
z.prop.ris = numerator / denominator
return(z.prop.ris)
}
z.prop(21,2,49,26)
p-value = 2*pnorm(-abs(z))
z = z.prop(21,2,49,26)
z
p-value = 2*pnorm(-abs(z))
pvalue = 2*pnorm(-abs(z))
pvalue
prop.test(x = c(243,25,55), n = c(2154,508,526), correct=FALSE)
prop.test(x = c(243,25,55), n = c(2154,508,526), correct=FALSE)
284*0.229
278*0.248
118+65
69+149
267 + 134
105+97
rsconnect::deployApp(‘/Users/September/Documents/GitHub/bios611-projects-fall-2019-September-C/project_2’)
rsconnect::deployApp(‘/Users/September/Documents/GitHub/bios611-projects-fall-2019-September-C/project_2’)
rsconnect::setAccountInfo()
rsconnect::setAccountInfo(name='september',
token='79BE2A07AF31C5ABE4EB0A8ED0F7F430',
secret='<SECRET>')
rsconnect::setAccountInfo(name='september',
token='79BE2A07AF31C5ABE4EB0A8ED0F7F430',
secret='qE/rtLIrOsDYJZUVtzLYTJPJF/xMmUvJvrUOsVMB')
library(rsconnect)
deployApp()
setwd('/Users/September/Documents/GitHub/bios611-projects-fall-2019-September-C/project_2')
shiny::runApp()
library(rsconnect)
deployApp()
